Pulumi VPC

import * as pulumi from "@pulumi/pulumi";
import * as aws from "@pulumi/aws";

// Create a new VPC
const vpc = new aws.ec2.Vpc("my-vpc", {
    cidrBlock: "10.0.0.0/16",
    enableDnsHostnames: true,
    enableDnsSupport: true,
    tags: {
        Name: "my-vpc",
    },
});

// Create an Internet Gateway
const internetGateway = new aws.ec2.InternetGateway("my-igw", {
    vpcId: vpc.id,
    tags: {
        Name: "my-internet-gateway",
    },
});

// Create Public Subnets (for web servers)
const publicSubnet1 = new aws.ec2.Subnet("public-subnet-1", {
    vpcId: vpc.id,
    cidrBlock: "10.0.1.0/24",
    availabilityZone: "ap-south-1a",  // Change this to your preferred region
    mapPublicIpOnLaunch: true,
    tags: {
        Name: "public-subnet-1",
    },
});

const publicSubnet2 = new aws.ec2.Subnet("public-subnet-2", {
    vpcId: vpc.id,
    cidrBlock: "10.0.2.0/24",
    availabilityZone: "ap-south-1b",
    mapPublicIpOnLaunch: true,
    tags: {
        Name: "public-subnet-2",
    },
});

// Create Private Subnets (for database servers)
const privateSubnet1 = new aws.ec2.Subnet("private-subnet-1", {
    vpcId: vpc.id,
    cidrBlock: "10.0.3.0/24",
    availabilityZone: "ap-south-1a",
    tags: {
        Name: "private-subnet-1",
    },
});

const privateSubnet2 = new aws.ec2.Subnet("private-subnet-2", {
    vpcId: vpc.id,
    cidrBlock: "10.0.4.0/24",
    availabilityZone: "ap-south-1b",
    tags: {
        Name: "private-subnet-2",
    },
});

// Create a Security Group to allow SSH access
const sshSecurityGroup = new aws.ec2.SecurityGroup("ssh-secgrp", {
    vpcId: vpc.id,
    description: "Allow SSH access to EC2 instances",
    ingress: [
        {
            protocol: "tcp",
            fromPort: 22,
            toPort: 22,
            cidrBlocks: ["0.0.0.0/0"],  // Allows SSH from anywhere (not recommended for production)
        },
    ],
    egress: [
        {
            protocol: "-1",  // Allows all outbound traffic
            fromPort: 0,
            toPort: 0,
            cidrBlocks: ["0.0.0.0/0"],
        },
    ],
    tags: {
        Name: "ssh-secgrp",
    },
});

// Create a Public Route Table
const publicRouteTable = new aws.ec2.RouteTable("public-route-table", {
    vpcId: vpc.id,
    routes: [
        {
            cidrBlock: "0.0.0.0/0",
            gatewayId: internetGateway.id,
        },
    ],
    tags: {
        Name: "public-route-table",
    },
});

// Associate the Public Subnets with the Public Route Table
new aws.ec2.RouteTableAssociation("public-subnet-1-association", {
    subnetId: publicSubnet1.id,
    routeTableId: publicRouteTable.id,
});

new aws.ec2.RouteTableAssociation("public-subnet-2-association", {
    subnetId: publicSubnet2.id,
    routeTableId: publicRouteTable.id,
});

// Allocate an Elastic IP for the NAT Gateway
const natEip = new aws.ec2.Eip("nat-eip", {
    tags: {
        Name: "nat-eip",
    },
});

// Create the NAT Gateway in the first Public Subnet
const natGateway = publicSubnet1.id.apply(subnetId => new aws.ec2.NatGateway("my-nat-gateway", {
    allocationId: natEip.id,
    subnetId: subnetId,
    tags: {
        Name: "my-nat-gateway",
    },
}));

// Create a Private Route Table (for private subnets with NAT Gateway)
const privateRouteTable = new aws.ec2.RouteTable("private-route-table", {
    vpcId: vpc.id,
    routes: [
        {
            cidrBlock: "0.0.0.0/0",
            natGatewayId: natGateway.id,
        },
    ],
    tags: {
        Name: "private-route-table",
    },
});

// Associate the Private Subnets with the Private Route Table
new aws.ec2.RouteTableAssociation("private-subnet-1-association", {
    subnetId: privateSubnet1.id,
    routeTableId: privateRouteTable.id,
});

new aws.ec2.RouteTableAssociation("private-subnet-2-association", {
    subnetId: privateSubnet2.id,
    routeTableId: privateRouteTable.id,
});

// Generate a new SSH key pair (if you don't have one already)
// Note: You should replace this with your actual public key
const keyPair = new aws.ec2.KeyPair("my-keypair", {
    keyName: "my-keypair",
    publicKey: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDUWcfmYSRsrSYyLYATCPK2SFggXOHN7MLmbdz044pTOqvRPwRIcNZkMbArgI/5g6Lfkul58aJUCPF7q7MR3mWy8RJlTCfPEKjX8MXgBnbkMvoTj7SW56YWwKkpKr+JbeN6JEiSYOQovoGLMzoZGP504VX7pIdkz1Pi3027FCyCRnWdL7mjkdqwrYQHktQdBQ9DJDTeH5yeK+j1B/Vxi0jcNvIfhij3hDK9sL3E5zWfaneMf7JmoikJX5SJj3VzOdmclP67AqWWJgerpZH6okNDpgxh9V7m8qofHosOgBCK9cc1yJm+sNTXGpBAvJhX7+gHCKbpj0ZKdmsvGeD/PGq052AetH+1GK0fNHuH3UXAzCYsSFmcD0oQnjERXz6elW2DOF76LtYp3c8PhTA4PWulUs94LRN1YRnmoRldFfkcylxKWR6JExOFV72Zo1pOnsoqaJyy8Cv5RFUXYYXRZQNbT8MZPQF5F437kRZT+OTVXXbC8OJzkjh1aW3ykj8e+umBrDJLwQbpeDIe8yfeOiXCMe9UGmdqA3/Qne5hlewIGQU9lBDwS+zPgCvIMWJHGvyDI271WJeZzhp/CucljvtepqDWPJiX9Sv1QyN93RV40rgSvVrDtgDyOPu5GHVmNn5BdHgv1uiunWBm0zEuMDhFdxOlaclTsvKsUHCS2O03Kw== info@gnugroup.org",  // Replace with your actual SSH public key
});

// Outputs
export const vpcId = vpc.id;
export const publicSubnetIds = [publicSubnet1.id, publicSubnet2.id];
export const privateSubnetIds = [privateSubnet1.id, privateSubnet2.id];
export const internetGatewayId = internetGateway.id;
export const natGatewayId = natGateway.id;
export const sshSecurityGroupId = sshSecurityGroup.id;
export const keyPairName = keyPair.keyName;
